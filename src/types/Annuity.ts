/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AnnuityInterface extends utils.Interface {
  contractName: "Annuity";
  functions: {
    "RATE()": FunctionFragment;
    "assets()": FunctionFragment;
    "buy(uint256,uint256,uint256)": FunctionFragment;
    "buyDetails(address)": FunctionFragment;
    "calculateFV(uint256,uint256)": FunctionFragment;
    "calculatePMT_FV(uint256,uint256)": FunctionFragment;
    "calculatePMT_PV_0(uint256,uint256)": FunctionFragment;
    "calculatePV_0(uint256,uint256)": FunctionFragment;
    "checkForLiquidation()": FunctionFragment;
    "deployer()": FunctionFragment;
    "insuranceDetails(address)": FunctionFragment;
    "insure(uint256,uint256,uint256)": FunctionFragment;
    "insurerAddresses(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "assets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyDetails", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateFV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePMT_FV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePMT_PV_0",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePV_0",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkForLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "insuranceDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "insure",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePMT_FV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePMT_PV_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePV_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "insure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insurerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Annuity extends BaseContract {
  contractName: "Annuity";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AnnuityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      PV_0: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        principal: BigNumber;
        remainingValue: BigNumber;
        periods: BigNumber;
        periodDuration: BigNumber;
        lastWithdrawn: BigNumber;
        deposit: BigNumber;
        annuitant: string;
      }
    >;

    calculateFV(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePMT_FV(
      FV: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePMT_PV_0(
      PV_0: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePV_0(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkForLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    insuranceDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        collateral: BigNumber;
        amtBorrowed: BigNumber;
        amtPaidBack: BigNumber;
        periods: BigNumber;
        periodDuration: BigNumber;
        lastPaid: BigNumber;
        insurer: string;
      }
    >;

    insure(
      FV: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insurerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RATE(overrides?: CallOverrides): Promise<BigNumber>;

  assets(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    PV_0: BigNumberish,
    n: BigNumberish,
    t: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      principal: BigNumber;
      remainingValue: BigNumber;
      periods: BigNumber;
      periodDuration: BigNumber;
      lastWithdrawn: BigNumber;
      deposit: BigNumber;
      annuitant: string;
    }
  >;

  calculateFV(
    PMT: BigNumberish,
    n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePMT_FV(
    FV: BigNumberish,
    n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePMT_PV_0(
    PV_0: BigNumberish,
    n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePV_0(
    PMT: BigNumberish,
    n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkForLiquidation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  insuranceDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      collateral: BigNumber;
      amtBorrowed: BigNumber;
      amtPaidBack: BigNumber;
      periods: BigNumber;
      periodDuration: BigNumber;
      lastPaid: BigNumber;
      insurer: string;
    }
  >;

  insure(
    FV: BigNumberish,
    n: BigNumberish,
    t: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insurerAddresses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RATE(overrides?: CallOverrides): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      PV_0: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        principal: BigNumber;
        remainingValue: BigNumber;
        periods: BigNumber;
        periodDuration: BigNumber;
        lastWithdrawn: BigNumber;
        deposit: BigNumber;
        annuitant: string;
      }
    >;

    calculateFV(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePMT_FV(
      FV: BigNumberish,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePMT_PV_0(
      PV_0: BigNumberish,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePV_0(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkForLiquidation(overrides?: CallOverrides): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    insuranceDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        collateral: BigNumber;
        amtBorrowed: BigNumber;
        amtPaidBack: BigNumber;
        periods: BigNumber;
        periodDuration: BigNumber;
        lastPaid: BigNumber;
        insurer: string;
      }
    >;

    insure(
      FV: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insurerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    RATE(overrides?: CallOverrides): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      PV_0: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDetails(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateFV(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePMT_FV(
      FV: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePMT_PV_0(
      PV_0: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePV_0(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkForLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insure(
      FV: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insurerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      PV_0: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFV(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePMT_FV(
      FV: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePMT_PV_0(
      PV_0: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePV_0(
      PMT: BigNumberish,
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkForLiquidation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insure(
      FV: BigNumberish,
      n: BigNumberish,
      t: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insurerAddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
